generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id          String    @id @default(cuid())
  email       String    @unique
  name        String
  password    String
  role        UserRole  @default(USER)
  roleId      String?
  avatarUrl   String?
  isActive    Boolean   @default(true)
  lastLoginAt DateTime?
  timezone    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  userPermissions UserPermission[]
  userCategories  UserCategory[]
  posts           Post[]
  comments        Comment[]
  likes           Like[]
  events          Event[]
  resetPassword   ResetPassword?

  @@map("users")
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  resource    String
  action      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userPermissions UserPermission[]

  @@map("permissions")
}

model UserPermission {
  id           String @id @default(cuid())
  userId       String
  permissionId String

  // Relations
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([userId, permissionId])
  @@map("user_permissions")
}

model ResetPassword {
  id        String   @id @default(cuid())
  userId    String   @unique
  code      String
  expires   DateTime
  attempts  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reset_passwords")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  color       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userCategories UserCategory[]
  posts          Post[]

  @@map("categories")
}

model UserCategory {
  id         String @id @default(cuid())
  userId     String
  categoryId String

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([userId, categoryId])
  @@map("user_categories")
}

model Post {
  id          String     @id @default(cuid())
  title       String
  content     String
  excerpt     String?
  coverUrl    String?
  status      PostStatus @default(DRAFT)
  visibility  Visibility @default(PUBLIC)
  publishedAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  authorId    String
  categoryId  String?

  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  comments Comment[]
  likes    Like[]
  tags     Tag[]     @relation("PostTags")

  @@map("posts")
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  posts Post[] @relation("PostTags")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  postId    String
  parentId  String?

  author  User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post    Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  parent  Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies Comment[] @relation("CommentReplies")

  @@map("comments")
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  postId    String

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("likes")
}

model Event {
  id          String    @id @default(cuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime?
  location    String?
  isAllDay    Boolean   @default(false)
  color       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdById String

  // Relations
  createdBy User @relation(fields: [createdById], references: [id], onDelete: Cascade)

  @@map("events")
}

enum UserRole {
  ADMIN
  USER
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum Visibility {
  PUBLIC
  PRIVATE
  UNLISTED
}
